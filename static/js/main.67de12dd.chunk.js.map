{"version":3,"sources":["images/voice.svg","components/BrowserCompatibility/BrowserCompatibility.js","components/Heading/Heading.js","components/Loader/Loader.js","components/Body/VoiceIcon/VoiceIcon.js","components/Body/Form/Form.js","components/Body/Body.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BrowserCompatibility","props","react_default","a","createElement","className","Heading","heading","Loader","VoiceIcon","src","GoogleVoiceIcon","alt","style","width","height","onClick","event","startRecognition","disableStart","Fragment","components_Loader_Loader","fontSize","cursor","pauseRecognition","Form","type","name","placeholder","defaultValue","firstName","lastName","email","contact","isSubmit","Controls","browserSpecificRecognition","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","_useState","useState","recognition","Object","slicedToArray","_useState3","_useState4","setDisableStart","_useState5","_useState6","disablePause","setDisablePause","_useState7","_useState8","speechText","setSpeechText","_useState9","_useState10","setFirstName","_useState11","_useState12","setLastName","_useState13","_useState14","setEmail","_useState15","_useState16","setContact","_useState17","_useState18","setSubmitFlag","validateSpeech","transcript","resetFormFields","stop","onresult","resultsLength","results","length","i","resultIndex","trim","concat","undefined","includes","replace","toLowerCase","isNaN","Number","alert","setTimeout","Body_VoiceIcon_VoiceIcon","preventDefault","lang","continuous","start","Body_Form_Form","Layout","components_Heading_Heading","Body","App","isBrowserNotCompatible","hasOwnProperty","components_BrowserCompatibility_BrowserCompatibility","components_Layout_Layout","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67de12dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/voice.36487195.svg\";","import React from 'react';\n\nconst BrowserCompatibility = (props) => {\n    return (\n        <div className=\"alert alert-danger text-center col-md-6 offset-3 mt-5\">\n            <h3 className>It looks like your browser doesn't support speech recognition.</h3>\n        </div>\n    );\n};\n\nexport default BrowserCompatibility;\n","import React from 'react';\n\nconst Heading = (props) => {\n    return (\n        <h2 className=\"mt-1\">{props.heading}</h2>\n    );\n};\n\nexport default Heading;\n","import React from 'react';\nimport './Loader.css';\n\nconst Loader = (props) => {\n    return (\n        <span className=\"loading-dots\">\n            <span className=\"dot\"></span>\n            <span className=\"dot\"></span>\n            <span className=\"dot\"></span>\n        </span>\n    );\n};\n\nexport default Loader;\n","import React from 'react';\nimport GoogleVoiceIcon from '../../../images/voice.svg';\nimport Loader from '../../Loader/Loader';\n\nconst VoiceIcon = (props) => {\n    return (\n        <div className=\"note w-100\">\n            <h5>\n                Start recording voice by clicking on\n                <span className=\"pl-1\">\n                    <img\n                        src={GoogleVoiceIcon}\n                        alt=\"Not available\"\n                        style={{ width: '30px', height: '20px' }}\n                        onClick={(event) => props.startRecognition(event)} />\n                    {/* Enable loader when recognition starts */}\n                    {\n                        props.disableStart &&\n                        <React.Fragment>\n                            <Loader />\n                            <span\n                                className=\"close-icon ml-2\"\n                                style={{ fontSize: '22px', cursor: 'pointer' }}\n                                onClick={(event) => props.pauseRecognition(event)}>&times;</span>\n                        </React.Fragment>\n                    }\n                </span>\n            </h5>\n        </div>\n    );\n};\n\nexport default VoiceIcon;\n","import React from 'react';\n\nconst Form = (props) => {\n    return (\n        <form className=\"controls-form mt-4 pt-2 row\">\n            <input\n                type=\"text\"\n                name=\"firstname\"\n                placeholder=\"Say Firstname\"\n                defaultValue={props.firstName}\n                className=\"form-control mt-3\" />\n            <input\n                type=\"text\"\n                name=\"lastname\"\n                placeholder=\"Say Lastname\"\n                defaultValue={props.lastName}\n                className=\"form-control mt-3\" />\n            <input\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Say Email\"\n                defaultValue={props.email}\n                className=\"form-control mt-3\" />\n            <input\n                type=\"number\"\n                name=\"mobile\"\n                placeholder=\"Say Contact\"\n                defaultValue={props.contact}\n                className=\"form-control mt-3\" />\n            <div className=\"controls mt-4\">\n                <p className=\"text-left\">Submit your form by saying <b>'Submit Form'</b></p>\n                <p className=\"text-left\">Reset your form by saying <b>'Reset'</b></p>\n                <p>You can stop recording by saying <b>'Stop or Pause'</b></p>\n            </div>\n            {props.isSubmit && <div className=\"alert alert-success w-100 mt-4\">Thanks for submitting details !</div>}\n        </form>\n    );\n};\n\nexport default Form;","import React, { useState } from 'react';\nimport VoiceIcon from './VoiceIcon/VoiceIcon';\nimport Form from './Form/Form';\n\nconst Controls = (props) => {\n    const browserSpecificRecognition = new (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition)();\n    const [recognition] = useState(browserSpecificRecognition);\n    const [disableStart, setDisableStart] = useState(false);\n    const [disablePause, setDisablePause] = useState(false);\n    // const [error, setError] = useState(null);\n    let [speechText, setSpeechText] = useState();\n    let [firstName, setFirstName] = useState('');\n    let [lastName, setLastName] = useState('');\n    let [email, setEmail] = useState('');\n    let [contact, setContact] = useState('');\n    let [isSubmit, setSubmitFlag] = useState(false);\n\n    // useEffect(() => {\n    //     recognition.lang = 'en-IN';\n    //     recognition.continuous = true;\n    //     recognition.start();\n    // }, []);\n\n    const startRecognition = (event) => {\n        event.preventDefault();\n        if (!disableStart && !isSubmit) {\n            recognition.lang = 'en-IN';\n            recognition.continuous = true;\n            setDisableStart(true);\n            disablePause && setDisablePause(false)\n            recognition.start();\n        }\n    };\n\n    const validateSpeech = (transcript) => {\n        return transcript === 'first name' || transcript === 'last name' || transcript === 'email' || transcript === 'contact';\n    };\n\n    const resetFormFields = () => {\n        setFirstName('');\n        setLastName('');\n        setEmail('');\n        setContact('');\n        disableStart && setDisableStart(false);\n        recognition.stop();\n    };\n\n    recognition.onresult = (event) => {\n        const resultsLength = event.results.length;\n        for (let i = event.resultIndex; i < resultsLength; i++) {\n            const transcript = event.results[i][0].transcript.trim();\n            speechText = speechText ? speechText.concat(transcript) : transcript;\n            setSpeechText(speechText);\n\n            // Check if user speaks firstname then set firstname\n            if (event.results[i - 1] !== undefined && !validateSpeech(transcript) && event.results[i - 1][0].transcript.includes('first name')) {\n                setFirstName(transcript);\n            }\n            // Check if user speaks lastname then set lastname\n            if (event.results[i - 1] !== undefined && !validateSpeech(transcript) && event.results[i - 1][0].transcript.includes('last name')) {\n                setLastName(transcript);\n            }\n            // Check if user speaks email then set email\n            if (event.results[i - 1] !== undefined && !validateSpeech(transcript) && event.results[i - 1][0].transcript.includes('email')) {\n                setEmail(transcript.replace(/ +/g, \"\").toLowerCase());\n            }\n            // Check if user say 'contact' then set contact number\n            if (event.results[i - 1] !== undefined && !validateSpeech(transcript) && event.results[i - 1][0].transcript.includes('contact')) {\n                isNaN(Number(transcript.replace(/ +/g, \"\"))) ? alert('Please enter valid number') : setContact(Number(transcript.replace(/ +/g, \"\")));\n            }\n            // Check if user say 'Reset' then reset input details\n            if (event.results[i - 1] !== undefined && transcript.includes('reset')) {\n                resetFormFields();\n            }\n            // Check if user say 'Submit Form' then submit response and show thanks message\n            if (event.results[i - 1] !== undefined && transcript.includes('submit form')) {\n                resetFormFields();\n                setSubmitFlag(true);\n                setTimeout(() => {\n                    setSubmitFlag(false);\n                }, 8000);\n            }\n            // Check if user said 'stop'/'pause' then stop recording voice\n            if (transcript === 'pause' || transcript === 'stop') {\n                recognition.stop();\n                disableStart && setDisableStart(false);\n            }\n        }\n    };\n\n    // recognition.onerror = (event) => {\n    //     setError(event.error);\n    // };\n\n    const pauseRecognition = (event) => {\n        event.preventDefault();\n        setDisablePause(true);\n        disableStart && setDisableStart(false);\n        recognition.stop();\n    };\n\n    return (\n        <div className=\"controls w-100 mt-4\">\n            <VoiceIcon\n                startRecognition={(event) => startRecognition(event)}\n                pauseRecognition={(event) => pauseRecognition(event)}\n                disableStart={disableStart}\n                speechText={speechText} />\n            <Form\n                firstName={firstName}\n                lastName={lastName}\n                email={email}\n                contact={contact}\n                isSubmit={isSubmit}\n            />\n        </div>\n    );\n};\n\nexport default Controls;\n","\nimport React from 'react';\nimport Heading from '../Heading/Heading';\nimport Body from '../Body/Body';\n\nconst Layout = (props) => {\n    return (\n        <div className=\"layout col-md-10 offset-1 pt-5 text-center\">\n            <div className=\"message-controls col-md-6 offset-3\">\n                <Heading heading=\"Fill your form with speech recognition\" />\n                <Body />\n            </div>\n        </div>\n    );\n};\n\nexport default Layout;\n","import React from 'react';\nimport BrowserCompatibility from './components/BrowserCompatibility/BrowserCompatibility';\nimport Layout from './components/Layout/Layout';\nimport './App.css';\n\nfunction App() {\n\tlet isBrowserNotCompatible = false;\n\n\tif (!window.hasOwnProperty('webkitSpeechRecognition')) {\n\t\tisBrowserNotCompatible = true;\n\t}\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t{isBrowserNotCompatible ? <BrowserCompatibility /> : <Layout />}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}